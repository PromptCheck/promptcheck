name: PromptCheck CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  promptcheck_pr_check:
    name: PromptCheck PR Check & Comment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install PromptCheck with BLEU from local source
        run: |
          pip install .[bleu]

      - name: Run PromptCheck
        run: promptcheck run --soft-fail --output-dir results tests/basic_example.yaml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Post PR Comment with PromptCheck Results
        if: github.event_name == 'pull_request'
        run: python scripts/post_comment.py results/promptcheck_run_*.json
        env:
          GH_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}

  pytest_tests:
    name: Pytest Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        run: pip install poetry==1.8.3
      
      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install dependencies (including dev and bleu extra)
        run: poetry install --extras bleu --with dev

      - name: Run Pytest
        run: poetry run pytest tests/

# Commented-out test_pypi_package job removed.
  # test_pypi_package: # Temporary job removed
  #   name: Test PromptCheck from TestPyPI
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository code (for test files and example config)
  #       uses: actions/checkout@v4
  #
  #     - name: Build and Run Package from TestPyPI
  #       env:
  #         OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  #       run: |
  #         echo "Preparing config file for test run..."
  #         if [ -f promptcheck.config.yaml.example ]; then
  #           cp promptcheck.config.yaml.example promptcheck.config.yaml
  #           echo "Copied promptcheck.config.yaml.example to promptcheck.config.yaml"
  #         else
  #           echo "Warning: promptcheck.config.yaml.example not found!"
  #           echo "api_keys:" > promptcheck.config.yaml
  #           echo "  openrouter: YOUR_KEY_FROM_ENV" >> promptcheck.config.yaml
  #         fi
  #
  #         echo "FROM python:3.11-slim" > Dockerfile.testpypi
  #         echo "RUN pip install --no-cache-dir --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple promptcheck==0.0.1a0" >> Dockerfile.testpypi
  #         echo "WORKDIR /github/workspace" >> Dockerfile.testpypi
  #         echo "COPY promptcheck.config.yaml /github/workspace/promptcheck.config.yaml" >> Dockerfile.testpypi
  #         echo "COPY tests /github/workspace/tests" >> Dockerfile.testpypi
  #         echo "ENTRYPOINT [\"promptcheck\", \"run\", \"--config\", \"promptcheck.config.yaml\", \"tests/basic_example.yaml\"]" >> Dockerfile.testpypi
  #
  #         echo "--- Generated Dockerfile.testpypi --- "
  #         cat Dockerfile.testpypi
  #         echo "------------------------------------"
  #         
  #         DOCKER_BUILDKIT=0 docker build -t promptcheck-testpypi-img -f Dockerfile.testpypi .
  #         
  #         echo "Running the container..."
  #         docker run --rm \
  #           -e OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}" \
  #           promptcheck-testpypi-img 